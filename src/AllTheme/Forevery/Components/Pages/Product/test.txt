 const [zoomPosition, setZoomPosition] = useState({ x: 0, y: 0 })
  const [isZoomed, setIsZoomed] = useState(false)
  const imageRef = useRef(null)

  const handleMouseMove = (e) => {
    if (!imageRef.current) return;
    const { left, top, width, height } = imageRef?.current?.getBoundingClientRect();
    console.log('Bounding rect:', { left, top, width, height }); // Log dimensions for debugging

    const mouseX = e?.clientX - left;
    const mouseY = e?.clientY - top;
    const x = Math.abs((mouseX / width) * 100);
    const y = Math.abs((mouseY / height) * 100);
    setZoomPosition({ x, y })
    setIsZoomed(true)
  }

  useEffect(() => {
    return () => {
      handleMouseMove();
    }
  }, [])
  
  const handleMouseLeave = () => {
    setIsZoomed(false)
  }
  return (
    <div className="for_ProductDet_mainDiv">
      <div className="for_ProductDet_div">
        <div className="for_ProductDet_details_container">
          {CustPath === 'Diamond_Pendants' && (
            <DiamondNavigation
              StyleCondition={StyleCondition}
              Swap={Swap}
              setswap={setswap}
              customizeStep={customizeStep}
              setshape={setshape}
            />
          )}
          <div className="for_ProductDet_container_div">
            {
              !mobileView ? (
                <div className="for_ProductDet_left_prodImages">
                  <div className="for_slider_container">
                    <div className="for_images_slider">
                      {loadingdata || pdImageLoading ? (
                        <>
                          <div className="for_slider">
                            {Array.from({ length: 3 }).map((_, i) => (
                              <div key={i} className='for_skeleton_thumb_div'>
                                <Skeleton className='for_skeleton_det_thumb' />
                              </div>
                            ))}
                          </div>
                          <div className="for_main_image">
                            <Skeleton variant='square' className='for_skeleton_main_image' />
                          </div>
                        </>
                      ) : (
                        <>
                          <div className="for_slider">
                            {(
                              PdImageArr.map((val, i) => (
                                <div
                                  key={i}
                                  className={`for_box ${i === currentSlide ? "active" : ""}`}
                                  onClick={() => handleThumbnailClick(i)}
                                >
                                  {val?.type === "img" ? (
                                    <img
                                      src={val?.src}
                                      alt=""
                                      onClick={() => {
                                        setSelectedThumbImg({ link: val?.src, type: "img" });
                                        setThumbImgIndex(i);
                                      }}
                                      onError={(e) => {
                                        e.target.onerror = null;
                                        e.target.src = imageNotFound;
                                      }}
                                    />
                                  ) : (
                                    <div className="for_video_box" style={{ position: "relative" }}>
                                      <video
                                        src={val?.src}
                                        autoPlay
                                        muted
                                        loop
                                        style={{ width: '65px' }}
                                      />
                                      <IoIosPlayCircle className="for_play_io_icon" />
                                    </div>
                                  )}
                                </div>
                              ))
                            )}
                          </div>
                          <div className="for_main_image">
                            <div className="forWeb_app_product_label">
                              {singleProd?.IsInReadyStock === 1 && <span className="forWeb_app_instock">In Stock</span>}
                              {singleProd?.IsBestSeller === 1 && <span className="forWeb_app_bestSeller">Best Seller</span>}
                              {singleProd?.IsTrending === 1 && <span className="forWeb_app_intrending">Trending</span>}
                              {singleProd?.IsNewArrival === 1 && <span className="forWeb_app_newarrival">New</span>}
                            </div>
                            {(
                              imageSrc || PdImageArr?.length > 1 ? (
                                <Slider {...settings} ref={sliderRef} lazyLoad="progressive">
                                  {PdImageArr?.length > 0 && PdImageArr.map((val, i) => (
                                    <div key={i} className="for_slider_card"
                                    
                                   
                                    >
                                      {/*   this is the image */}
                                      <div className="for_image"
                                      style={{
                                        position:"relative",
                                        overflow:"hidden",
                                        width:"100%",
                                      }}>
                                        {val?.type === "img" ? (
                                         <div className="image_container"
                                         style={{
                                          position:"relative",
                                        overflow:"hidden",
                                        width:"100%",
                                         }}
                                         onMouseMove={handleMouseMove}
                                         onMouseLeave={handleMouseLeave}
                                         >
                                           <img
                                         
                                            loading="lazy"
                                            ref={imageRef}
                                            src={val?.src}
                                            alt=""
                                            // style={{ transition: 'transform 0.3s ease' }}
                                            onLoad={() => setIsImageLoad(false)}
                                            style={{
                                              transform: isZoomed ? 'scale(1.6)' : 'scale(1)',
                                              transformOrigin: `${zoomPosition.x}% ${zoomPosition.y}%`,
                                              transition: 'transform 0.1s ease-out',
                                              objectFit: 'contain',  // Ensure it's scaled properly
                                              objectPosition: 'center',  // Keep image centered when zoomed
                                              // width: '100%', // Ensure it occupies full width of the parent container
                                            }
                                          
                                          }
                                          />